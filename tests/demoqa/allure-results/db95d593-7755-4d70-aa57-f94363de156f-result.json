{"name": "test_registration", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 4s, while waiting for:\nbrowser.element(('css selector', '.table')).all(('css selector', 'td:last-child')).has exact texts ('Sergey Dobrovolskiy', 'dobrovolskiy@qa.ru', 'Male', '1002003040', '02 January,2100', 'Maths', 'Sports', 'nolan.jpg', 'Test Address', 'NCR Delhi')\n\nReason: AssertionError: actual visible_texts: ['Sergey Dobrovolskiy', 'dobrovolskiy@qa.ru', 'Male', '1002003040', '02 April,1900', 'Maths', 'Sports', 'nolan.jpg', 'Test Address', 'NCR Delhi']\nScreenshot: file:///home/vinterbris/.selene/screenshots/1702840440664/1702840440664.png\nPageSource: file:///home/vinterbris/.selene/screenshots/1702840440664/1702840440664.html", "trace": "fn = <selene.core.conditions.CollectionCondition object at 0x759ff024aab0>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n>               return fn(self.entity)\n\n../../.venv/lib/python3.12/site-packages/selene/core/wait.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../.venv/lib/python3.12/site-packages/selene/core/condition.py:174: in __call__\n    return self._fn(entity)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nentity = <selene.core.entity.Collection object at 0x759ff024aff0>\n\n    def fn(entity: E) -> None:\n        query_to_str = str(query)\n        result = (\n            query.__name__ if query_to_str.startswith('<function') else query_to_str\n        )\n        actual = query(entity)\n        if not predicate(actual):\n>           raise AssertionError(f'actual {result}: {actual}')\nE           AssertionError: actual visible_texts: ['Sergey Dobrovolskiy', 'dobrovolskiy@qa.ru', 'Male', '1002003040', '02 April,1900', 'Maths', 'Sports', 'nolan.jpg', 'Test Address', 'NCR Delhi']\n\n../../.venv/lib/python3.12/site-packages/selene/core/condition.py:146: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\n    def test_registration():\n        browser.open('/automation-practice-form')\n        browser.driver.execute_script(\"$('footer').remove()\")\n        browser.driver.execute_script(\"$('#fixedban').remove()\")\n    \n        # WHEN\n        browser.element('#firstName').should(be.blank).with_(type_by_js=True).type('Sergey')\n        browser.element('#lastName').should(be.blank).with_(type_by_js=True).type('Dobrovolskiy')\n        browser.element('#userEmail').should(be.blank).with_(type_by_js=True).type('dobrovolskiy@qa.ru')\n        browser.all('[name=gender]').element_by(have.value('Male')).element('..').click()\n        browser.element('#userNumber').should(be.blank).with_(type_by_js=True).type('1002003040')\n    \n        browser.element('#dateOfBirthInput').click()\n        browser.element('.react-datepicker__month-select').type('January')\n        browser.element('.react-datepicker__year-select').type(\"2100\")\n        browser.element(f'.react-datepicker__day--00{2}').click()\n    \n        browser.element('#subjectsContainer').click()\n        browser.element('#subjectsInput').type('Maths').press_enter()\n    \n        browser.all('[for^=hobbies-checkbox]').element_by(have.text('Sports')).click()\n    \n        browser.element(\"#uploadPicture\").set_value(os.path.abspath(os.path.join(RES_DIR, \"nolan.jpg\")))\n    \n        browser.element('#currentAddress').should(be.blank).with_(type_by_js=True).type('Test Address')\n    \n        browser.element('#state').perform(command.js.scroll_into_view).click()\n        browser.all('[id^=react-select][id*=option]').element_by(have.text('NCR')).click()\n    \n        browser.element('#city').click()\n        browser.all('[id^=react-select][id*=option]').element_by(have.text('Delhi')).click()\n    \n        browser.element('#submit').perform(command.js.click)\n    \n        # THEN\n>       browser.element('.table').all('td:last-child').should(\n            have.exact_texts('Sergey Dobrovolskiy', 'dobrovolskiy@qa.ru', 'Male', '1002003040', '02 January,2100',\n                             'Maths', 'Sports', 'nolan.jpg', 'Test Address', 'NCR Delhi'))\n\ntest_practice_form.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../.venv/lib/python3.12/site-packages/selene/core/entity.py:136: in should\n    self.wait.for_(condition)\n../../.venv/lib/python3.12/site-packages/selene/core/wait.py:143: in for_\n    return self._decorator(self)(logic)(fn)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfn = <selene.core.conditions.CollectionCondition object at 0x759ff024aab0>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n                return fn(self.entity)\n            except Exception as reason:\n                if time.time() > finish_time:\n                    reason_message = str(reason)\n    \n                    reason_string = '{name}: {message}'.format(\n                        name=reason.__class__.__name__,\n                        message=reason_message,\n                    )\n                    # TODO: think on how can we improve logging failures in selene, e.g. reverse msg and stacktrace\n                    # stacktrace = getattr(reason, 'stacktrace', None)\n                    timeout = self._timeout\n                    entity = self.entity\n    \n                    failure = TimeoutException(\n                        f'\\n'\n                        f'\\nTimed out after {timeout}s, while waiting for:'\n                        f'\\n{entity}.{fn}'\n                        f'\\n'\n                        f'\\nReason: {reason_string}'\n                    )\n    \n>                   raise self._hook_failure(failure)\nE                   selene.core.exceptions.TimeoutException: Message: \nE                   \nE                   Timed out after 4s, while waiting for:\nE                   browser.element(('css selector', '.table')).all(('css selector', 'td:last-child')).has exact texts ('Sergey Dobrovolskiy', 'dobrovolskiy@qa.ru', 'Male', '1002003040', '02 January,2100', 'Maths', 'Sports', 'nolan.jpg', 'Test Address', 'NCR Delhi')\nE                   \nE                   Reason: AssertionError: actual visible_texts: ['Sergey Dobrovolskiy', 'dobrovolskiy@qa.ru', 'Male', '1002003040', '02 April,1900', 'Maths', 'Sports', 'nolan.jpg', 'Test Address', 'NCR Delhi']\nE                   Screenshot: file:///home/vinterbris/.selene/screenshots/1702840440664/1702840440664.png\nE                   PageSource: file:///home/vinterbris/.selene/screenshots/1702840440664/1702840440664.html\n\n../../.venv/lib/python3.12/site-packages/selene/core/wait.py:141: TimeoutException"}, "start": 1702840451623, "stop": 1702840470226, "uuid": "920fa2bc-8c9d-4d70-92a2-eaa5685c6ac2", "historyId": "7e1a7fd707ede97b3bbdcaacb321436f", "testCaseId": "7e1a7fd707ede97b3bbdcaacb321436f", "fullName": "tests.demoqa.test_practice_form#test_registration", "labels": [{"name": "parentSuite", "value": "tests.demoqa"}, {"name": "suite", "value": "test_practice_form"}, {"name": "host", "value": "lnx-carbon"}, {"name": "thread", "value": "56115-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.demoqa.test_practice_form"}]}