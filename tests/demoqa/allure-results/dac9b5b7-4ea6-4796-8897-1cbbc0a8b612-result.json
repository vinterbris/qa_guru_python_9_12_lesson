{"name": "test_registration", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 4s, while waiting for:\nbrowser.all(('css selector', '[for^=hobbies-checkbox]')).element_by(has text Sports).click\n\nReason: ElementClickInterceptedException: Message: element click intercepted: Element <label title=\"\" for=\"hobbies-checkbox-1\" class=\"custom-control-label\">...</label> is not clickable at point (777, 632). Other element would receive the click: <td>...</td>\n  (Session info: chrome=100.0.4896.60)\nStacktrace:\n#0 0x55a6e533a013 <unknown>\n#1 0x55a6e509ca08 <unknown>\n#2 0x55a6e50da5a1 <unknown>\n#3 0x55a6e50d8188 <unknown>\n#4 0x55a6e50d5824 <unknown>\n#5 0x55a6e50d45c2 <unknown>\n#6 0x55a6e50c7e19 <unknown>\n#7 0x55a6e50f0932 <unknown>\n#8 0x55a6e50c76d3 <unknown>\n#9 0x55a6e50f0a3e <unknown>\n#10 0x55a6e5103b94 <unknown>\n#11 0x55a6e50f0823 <unknown>\n#12 0x55a6e50c608a <unknown>\n#13 0x55a6e50c71e5 <unknown>\n#14 0x55a6e5367e5d <unknown>\n#15 0x55a6e5381061 <unknown>\n#16 0x55a6e5369bb5 <unknown>\n#17 0x55a6e5381e08 <unknown>\n#18 0x55a6e535d2f0 <unknown>\n#19 0x55a6e539d988 <unknown>\n#20 0x55a6e539db08 <unknown>\n#21 0x55a6e53b75dd <unknown>\n#22 0x7fb0be2bf609 <unknown>\n\nScreenshot: file:///home/vinterbris/.selene/screenshots/1702836492972/1702836492972.png\nPageSource: file:///home/vinterbris/.selene/screenshots/1702836492972/1702836492972.html", "trace": "fn = <selene.core.wait.Command object at 0x7b6c18f67380>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n>               return fn(self.entity)\n\n../../.venv/lib/python3.12/site-packages/selene/core/wait.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../.venv/lib/python3.12/site-packages/selene/core/wait.py:61: in __call__\n    return self._fn(entity)\n../../.venv/lib/python3.12/site-packages/selene/core/entity.py:529: in raw_click\n    element.locate().click()\n../../.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7b6c19c59760>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55a6e539db08 \\\\u003Cunknown>\\\\n#21 0x55a6e53b75dd \\\\u003Cunknown>\\\\n#22 0x7fb0be2bf609 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <label title=\"\" for=\"hobbies-checkbox-1\" class=\"custom-control-label\">...</label> is not clickable at point (777, 632). Other element would receive the click: <td>...</td>\nE         (Session info: chrome=100.0.4896.60)\nE       Stacktrace:\nE       #0 0x55a6e533a013 <unknown>\nE       #1 0x55a6e509ca08 <unknown>\nE       #2 0x55a6e50da5a1 <unknown>\nE       #3 0x55a6e50d8188 <unknown>\nE       #4 0x55a6e50d5824 <unknown>\nE       #5 0x55a6e50d45c2 <unknown>\nE       #6 0x55a6e50c7e19 <unknown>\nE       #7 0x55a6e50f0932 <unknown>\nE       #8 0x55a6e50c76d3 <unknown>\nE       #9 0x55a6e50f0a3e <unknown>\nE       #10 0x55a6e5103b94 <unknown>\nE       #11 0x55a6e50f0823 <unknown>\nE       #12 0x55a6e50c608a <unknown>\nE       #13 0x55a6e50c71e5 <unknown>\nE       #14 0x55a6e5367e5d <unknown>\nE       #15 0x55a6e5381061 <unknown>\nE       #16 0x55a6e5369bb5 <unknown>\nE       #17 0x55a6e5381e08 <unknown>\nE       #18 0x55a6e535d2f0 <unknown>\nE       #19 0x55a6e539d988 <unknown>\nE       #20 0x55a6e539db08 <unknown>\nE       #21 0x55a6e53b75dd <unknown>\nE       #22 0x7fb0be2bf609 <unknown>\n\n../../.venv/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\n    def test_registration():\n        browser.open('/automation-practice-form')\n    \n        # WHEN\n        browser.element('#firstName').should(be.blank).with_(type_by_js=True).type('Sergey')\n        browser.element('#lastName').should(be.blank).with_(type_by_js=True).type('Dobrovolskiy')\n        browser.element('#userEmail').should(be.blank).with_(type_by_js=True).type('dobrovolskiy@qa.ru')\n        # browser.element('[name=gender][value=Male]').with_(click_by_js=True).click()\n        browser.all('[name=gender]').element_by(have.value('Male')).element('..').click()\n        browser.element('#userNumber').should(be.blank).with_(type_by_js=True).type('1002003040')\n    \n        browser.element('#dateOfBirthInput').click()\n        browser.element('.react-datepicker__month-select').type('January')\n        browser.element('.react-datepicker__year-select').type(\"2100\")\n        browser.element(f'.react-datepicker__day--00{2}').click()\n    \n        browser.element('#subjectsContainer').click()\n        browser.element('#subjectsInput').with_(type_by_js=True).type('Maths').press_enter()\n    \n>       browser.all('[for^=hobbies-checkbox]').element_by(have.text('Sports')).click()\n\ntest_practice_form.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../.venv/lib/python3.12/site-packages/selene/core/entity.py:533: in click\n    self.wait.for_(\n../../.venv/lib/python3.12/site-packages/selene/core/wait.py:143: in for_\n    return self._decorator(self)(logic)(fn)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfn = <selene.core.wait.Command object at 0x7b6c18f67380>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n                return fn(self.entity)\n            except Exception as reason:\n                if time.time() > finish_time:\n                    reason_message = str(reason)\n    \n                    reason_string = '{name}: {message}'.format(\n                        name=reason.__class__.__name__,\n                        message=reason_message,\n                    )\n                    # TODO: think on how can we improve logging failures in selene, e.g. reverse msg and stacktrace\n                    # stacktrace = getattr(reason, 'stacktrace', None)\n                    timeout = self._timeout\n                    entity = self.entity\n    \n                    failure = TimeoutException(\n                        f'\\n'\n                        f'\\nTimed out after {timeout}s, while waiting for:'\n                        f'\\n{entity}.{fn}'\n                        f'\\n'\n                        f'\\nReason: {reason_string}'\n                    )\n    \n>                   raise self._hook_failure(failure)\nE                   selene.core.exceptions.TimeoutException: Message: \nE                   \nE                   Timed out after 4s, while waiting for:\nE                   browser.all(('css selector', '[for^=hobbies-checkbox]')).element_by(has text Sports).click\nE                   \nE                   Reason: ElementClickInterceptedException: Message: element click intercepted: Element <label title=\"\" for=\"hobbies-checkbox-1\" class=\"custom-control-label\">...</label> is not clickable at point (777, 632). Other element would receive the click: <td>...</td>\nE                     (Session info: chrome=100.0.4896.60)\nE                   Stacktrace:\nE                   #0 0x55a6e533a013 <unknown>\nE                   #1 0x55a6e509ca08 <unknown>\nE                   #2 0x55a6e50da5a1 <unknown>\nE                   #3 0x55a6e50d8188 <unknown>\nE                   #4 0x55a6e50d5824 <unknown>\nE                   #5 0x55a6e50d45c2 <unknown>\nE                   #6 0x55a6e50c7e19 <unknown>\nE                   #7 0x55a6e50f0932 <unknown>\nE                   #8 0x55a6e50c76d3 <unknown>\nE                   #9 0x55a6e50f0a3e <unknown>\nE                   #10 0x55a6e5103b94 <unknown>\nE                   #11 0x55a6e50f0823 <unknown>\nE                   #12 0x55a6e50c608a <unknown>\nE                   #13 0x55a6e50c71e5 <unknown>\nE                   #14 0x55a6e5367e5d <unknown>\nE                   #15 0x55a6e5381061 <unknown>\nE                   #16 0x55a6e5369bb5 <unknown>\nE                   #17 0x55a6e5381e08 <unknown>\nE                   #18 0x55a6e535d2f0 <unknown>\nE                   #19 0x55a6e539d988 <unknown>\nE                   #20 0x55a6e539db08 <unknown>\nE                   #21 0x55a6e53b75dd <unknown>\nE                   #22 0x7fb0be2bf609 <unknown>\nE                   \nE                   Screenshot: file:///home/vinterbris/.selene/screenshots/1702836492972/1702836492972.png\nE                   PageSource: file:///home/vinterbris/.selene/screenshots/1702836492972/1702836492972.html\n\n../../.venv/lib/python3.12/site-packages/selene/core/wait.py:141: TimeoutException"}, "start": 1702836501072, "stop": 1702836511789, "uuid": "1c914397-625c-42cd-8f5e-7c8223f3f057", "historyId": "7e1a7fd707ede97b3bbdcaacb321436f", "testCaseId": "7e1a7fd707ede97b3bbdcaacb321436f", "fullName": "tests.demoqa.test_practice_form#test_registration", "labels": [{"name": "parentSuite", "value": "tests.demoqa"}, {"name": "suite", "value": "test_practice_form"}, {"name": "host", "value": "lnx-carbon"}, {"name": "thread", "value": "47865-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.demoqa.test_practice_form"}]}