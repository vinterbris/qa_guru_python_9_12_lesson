{"name": "test_registration", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 4s, while waiting for:\nbrowser.all(('css selector', '[id^=react-select][id*=option]')).element_by(has text Delhi).click\n\nReason: ElementClickInterceptedException: Message: Element <div id=\"react-select-4-option-0\" class=\" css-1n7v3ny-option\"> is not clickable at point (1187,891) because another element <div> obscures it\nStacktrace:\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.jsm:183:5\nElementClickInterceptedError@chrome://remote/content/shared/webdriver/Errors.jsm:282:5\nwebdriverClickElement@chrome://remote/content/marionette/interaction.js:166:11\ninteraction.clickElement@chrome://remote/content/marionette/interaction.js:125:11\nclickElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.jsm:203:24\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.jsm:91:31\n\nScreenshot: file:///home/vinterbris/.selene/screenshots/1702837906462/1702837906462.png\nPageSource: file:///home/vinterbris/.selene/screenshots/1702837906462/1702837906462.html", "trace": "fn = <selene.core.wait.Command object at 0x7f722630bf50>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n>               return fn(self.entity)\n\n.venv/lib/python3.12/site-packages/selene/core/wait.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.12/site-packages/selene/core/wait.py:61: in __call__\n    return self._fn(entity)\n.venv/lib/python3.12/site-packages/selene/core/entity.py:529: in raw_click\n    element.locate().click()\n.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f7226314740>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"Element <div id=\\\\\"react-select-4-o...dsChild.jsm:203:24\\\\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.jsm:91:31\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: Element <div id=\"react-select-4-option-0\" class=\" css-1n7v3ny-option\"> is not clickable at point (1187,891) because another element <div> obscures it\nE       Stacktrace:\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.jsm:183:5\nE       ElementClickInterceptedError@chrome://remote/content/shared/webdriver/Errors.jsm:282:5\nE       webdriverClickElement@chrome://remote/content/marionette/interaction.js:166:11\nE       interaction.clickElement@chrome://remote/content/marionette/interaction.js:125:11\nE       clickElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.jsm:203:24\nE       receiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.jsm:91:31\n\n.venv/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\n    def test_registration():\n        browser.open('/automation-practice-form')\n    \n        # WHEN\n        browser.element('#firstName').should(be.blank).with_(type_by_js=True).type('Sergey')\n        browser.element('#lastName').should(be.blank).with_(type_by_js=True).type('Dobrovolskiy')\n        browser.element('#userEmail').should(be.blank).with_(type_by_js=True).type('dobrovolskiy@qa.ru')\n        browser.all('[name=gender]').element_by(have.value('Male')).element('..').click()\n        browser.element('#userNumber').should(be.blank).with_(type_by_js=True).type('1002003040')\n    \n        browser.element('#dateOfBirthInput').click()\n        browser.element('.react-datepicker__month-select').type('January')\n        browser.element('.react-datepicker__year-select').type(\"2100\")\n        browser.element(f'.react-datepicker__day--00{2}').click()\n    \n        browser.element('#subjectsContainer').click()\n        browser.element('#subjectsInput').type('Maths').press_enter()\n    \n        browser.all('[for^=hobbies-checkbox]').element_by(have.text('Sports')).click()\n    \n        browser.element(\"#uploadPicture\").set_value(os.path.abspath(os.path.join(RES_DIR, \"nolan.jpg\")))\n    \n        browser.element('#currentAddress').should(be.blank).with_(type_by_js=True).type('Test Address')\n    \n        browser.element('#state').perform(command.js.scroll_into_view).click()\n        browser.all('[id^=react-select][id*=option]').element_by(have.text('NCR')).click()\n    \n        browser.element('#city').click()\n>       browser.all('[id^=react-select][id*=option]').element_by(have.text('Delhi')).click()\n\ntests/demoqa/test_practice_form.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.12/site-packages/selene/core/entity.py:533: in click\n    self.wait.for_(\n.venv/lib/python3.12/site-packages/selene/core/wait.py:143: in for_\n    return self._decorator(self)(logic)(fn)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfn = <selene.core.wait.Command object at 0x7f722630bf50>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n                return fn(self.entity)\n            except Exception as reason:\n                if time.time() > finish_time:\n                    reason_message = str(reason)\n    \n                    reason_string = '{name}: {message}'.format(\n                        name=reason.__class__.__name__,\n                        message=reason_message,\n                    )\n                    # TODO: think on how can we improve logging failures in selene, e.g. reverse msg and stacktrace\n                    # stacktrace = getattr(reason, 'stacktrace', None)\n                    timeout = self._timeout\n                    entity = self.entity\n    \n                    failure = TimeoutException(\n                        f'\\n'\n                        f'\\nTimed out after {timeout}s, while waiting for:'\n                        f'\\n{entity}.{fn}'\n                        f'\\n'\n                        f'\\nReason: {reason_string}'\n                    )\n    \n>                   raise self._hook_failure(failure)\nE                   selene.core.exceptions.TimeoutException: Message: \nE                   \nE                   Timed out after 4s, while waiting for:\nE                   browser.all(('css selector', '[id^=react-select][id*=option]')).element_by(has text Delhi).click\nE                   \nE                   Reason: ElementClickInterceptedException: Message: Element <div id=\"react-select-4-option-0\" class=\" css-1n7v3ny-option\"> is not clickable at point (1187,891) because another element <div> obscures it\nE                   Stacktrace:\nE                   WebDriverError@chrome://remote/content/shared/webdriver/Errors.jsm:183:5\nE                   ElementClickInterceptedError@chrome://remote/content/shared/webdriver/Errors.jsm:282:5\nE                   webdriverClickElement@chrome://remote/content/marionette/interaction.js:166:11\nE                   interaction.clickElement@chrome://remote/content/marionette/interaction.js:125:11\nE                   clickElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.jsm:203:24\nE                   receiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.jsm:91:31\nE                   \nE                   Screenshot: file:///home/vinterbris/.selene/screenshots/1702837906462/1702837906462.png\nE                   PageSource: file:///home/vinterbris/.selene/screenshots/1702837906462/1702837906462.html\n\n.venv/lib/python3.12/site-packages/selene/core/wait.py:141: TimeoutException"}, "start": 1702837916838, "stop": 1702837935240, "uuid": "36434622-7006-49c7-8f7b-867cc6009d46", "historyId": "7e1a7fd707ede97b3bbdcaacb321436f", "testCaseId": "7e1a7fd707ede97b3bbdcaacb321436f", "fullName": "tests.demoqa.test_practice_form#test_registration", "labels": [{"name": "parentSuite", "value": "tests.demoqa"}, {"name": "suite", "value": "test_practice_form"}, {"name": "host", "value": "lnx-carbon"}, {"name": "thread", "value": "52035-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.demoqa.test_practice_form"}]}